section_title	title	text
Previewing and sharing your assistant	Previewing and sharing your assistant	\nPreviewing and sharing your assistant\nInternal review is a necessary step in any virtual assistant workflow. You need an environment without customer interactions so your team can test your assistant. The draft environment closely resembles the final experience that your users encounter\n          so you can ensure that you are publishing the optimal end product.\n
Saving and editing your work in the draft environment	Previewing and sharing your assistant	\nSaving and editing your work in the draft environment\nThe draft environment contains all your in-progress work in the Actions, Preview, and Publish pages. Use the Draft environment tab to manage the draft environment, including\n            adding draft environment integrations (channels and extensions) that you can use for internal testing before deployment. These integrations are unique to the draft environment, and changes to draft integrations don't affect the live environment.\n
The Preview page	Previewing and sharing your assistant	\nThe Preview page\nUse the Preview page to test your assistant. You can experience your assistant from your customers' perspective. The Preview page includes an interactive web chat widget where you can test out your assistant\n            as if you were a customer. The content that is contained in the assistant is the content that you built into your actions or set up with the search integration.\nOn the Preview page, you also find the following elements:\n\nCopy link to share: Share an unauthenticated version of your assistant with your colleagues by sending them a link. For more information, see Copying a link to share.\nChange background: Change the background of the page so you can see what your assistant looks like on different web pages. For more information, see Changing background website.\nCustomize web chat: Customize your draft web chat channel to match your brand or website. For more information, see Web chat setup overview.\n\n\n
Copying a link to share	Previewing and sharing your assistant	\nCopying a link to share\nYou can share an unauthenticated version of your assistant with your team by sending them a link. The link opens a sample web page with an interactive web chat widget where you can test out your assistant as if you were a customer. Your subject-matter\n            experts can test your in-progress assistant without needing access to watsonx Assistant itself. The experience is identical to using Preview this environment on the draft environment tab.\nTo share a link:\n\nOn the Preview page, click Copy link to share.\nSend the link to your team.\n\nThe preview link is not accessible if web chat security is enabled. For more information about web chat security, see Securing the web chat.\n
Changing background website	Previewing and sharing your assistant	\nChanging background website\nYou can visualize how your assistant would look as a web chat widget on your organization's website. You can enter a URL or upload an image.\n
Entering a URL	Previewing and sharing your assistant	\nEntering a URL\nYou can enter a URL of your organization's website. Your assistant captures an image of your website to use as the Preview page background.\nYour website must be publicly available to all users. Private or intranet sites can’t be accessed. Any login, splash, cookie, or warning screens might be captured in the image.\nTo enter a URL:\n\nOn the Preview page, click Change background.\nClick Enter URL, then click Continue.\nEnter the path of your website URL, for example, https://www.example.com or example.com.\nClick Continue.\n\n
Uploading an image	Previewing and sharing your assistant	\nUploading an image\nYou can upload an image of your organization's website. Images are stored for 24 hours. The maximum file size is 1 MB. Supported file types are JPEG and PNG.\nTo upload an image:\n\nOn the Preview page, click Change background.\nClick Upload an image, then click Continue.\nDrag a file or click to upload, then click Change background.\n\nImages are stored for 24 hours. A warning message might appear on the Preview page about the time limit expiration. To clear this message:\n\nOn the Preview page, click Change background.\nClick Clear background setting, then click Continue.\nClick Remove background to finish.\n\n
Removing the background	Previewing and sharing your assistant	\nRemoving the background\nAfter you enter a URL or upload an image to use as a background, you might decide to remove the background and restore the default background.\nTo remove the background image:\n\nOn the Preview page, click Change background.\nClick Remove background, then click Continue.\nClick Remove background to finish.\n\n
Using variables to manage conversation information	Using variables to manage conversation information	"Using variables to manage conversation information\nWhen customers reply to your assistant, they share information about themselves and what they want. Your assistant remembers this information, and other information about a conversation, as variables. Your assistant can use variables\n          to provide a more personalized and customized experience, and to get users quickly to the solutions they need.\nVariables are a powerful tool that you can use to build a better assistant. Variables make possible all of the following benefits:\n\n\nPersonalization. The best virtual assistant experiences are targeted and personalized for each customer. When an assistant greets a customer by saying ""Hello, Frank! Welcome back,"" it tells Frank that it remembers\n              his name and that it has talked to him before. By storing this kind of information in variables and then referencing them in your assistant's output, you can personalize the conversation and help your assistant seem more human.\n\n\nAcceleration. Over the course of a conversation, your customers answer questions and make choices. These customer responses are stored as variables, which your assistant can then use to guide a conversation. By choosing the\n              right steps and not wasting your customers' time, you can get them as quickly as possible to the right solution.\n\n\nModularity. Some information might be useful for many different purposes (for example, a customer's current account balance or contact information). Rather than retrieving or recalculating this information in multiple locations,\n              you can do so once, by using a variable to store the result and then access it wherever you need it.\n\n\nPrivacy. The privacy of the customer information is critical for all enterprises. In your assistant, you can mask the variables to protect the privacy of the shared information. When you mask a variable to make it private,\n              the assistant hides the confidential information in the user input or assistant's responses with asterisks in the conversation logs."
Using variables to manage conversation information	Using variables to manage conversation information	The feature for masking the confidential customer information is available only for actions in assistants. If you're calling actions from a dialog, the privacy setting is available in your action steps but won't mask the customer information.\nA variable is simply a named container for a piece of information; by referencing this container by name, your assistant can store or retrieve the information at run time. For example, a variable that is called account_balance might store\n          your customer's current account balance, a value your assistant can update or retrieve as needed.\nThe data that is stored by a variable is characterized by the type of data that it contains, such as text, a numeric value, a date, or even a list of multiple values. The operations that you can perform with a variable vary depending on its data\n          type.
Action variables and session variables	Using variables to manage conversation information	"Action variables and session variables\nIBM® watsonx™ Assistant supports two categories of variables:\n\n\nAction variables: When a step collects information from the customer, the customer response is automatically stored in an action variable. You can think of action variables as short-term memory: they persist only\n                during the current action.\nThe name of an action variable is always the name of the step that defines the customer response. (You cannot change the name of an action variable.) For example, suppose you define a step that asks ""When were you born?"" and accepts\n                a date value as a response. The customer response is automatically stored as an action variable called When were you born?, which you can then access from any subsequent step in the same action.\nYou can make an action variable private by selecting the Protect data collected at this step checkbox in the customer response settings."
Action variables and session variables	Using variables to manage conversation information	Session variables: A value that is not necessarily tied to a particular action can be stored as a session variable. Session variables are long-term memory: they persist throughout the user's interaction with the\n                assistant, and your assistant can reference them from any action.\nYou can create a session variable to store the value from an action variable, if you want to keep the value available for other actions to use. You can also define a session variable based on another session variable, or by using a value\n                defined in an expression. In addition to variables you create, watsonx Assistant provides a set of built-in session variables for global values like the current time and date.\nTo hide the confidential customer information in the conversation logs, you can select the Protect data stored in this variable checkbox when you create or edit a session variable.{: tip)\nSession variables can help you to modularize your assistant because you can write a single action that collects information that is needed in multiple places. For example, you might have a greeting action that collects basic information\n                about the customer and stores the responses in session variables, which any action can then access.\nA session variable that you create persists only during a single session. At the end of the session, the variable's value is cleared. How long a session lasts depends upon how your customers access your assistant, and how your assistant\n                is configured.
Creating a session variable	Using variables to manage conversation information	Creating a session variable\nTo add a session variable that can be accessed by any action:\n\n\nFrom the Actions page, click Variables > Created by you. The list shows all session variables that you created for your assistant.\n\n\nClick New variable.\nYou can also create a new session variable from the step editor. For more information, see Storing a value in a session variable.\n\n\nIn the Name field, type a name for the session variable.\nAs you add the name, an ID is generated for you. Any spaces in the name are replaced with underscores (_) in the ID.\n\n\nOptional: Add a type to set the response type of the variable. (For more information about response types, see Choosing a response type.)\nFrom this field, you can also select any of the saved responses that you created. For more information about saved responses, see Saving and reusing customer responses.\nIn addition to the listed types, a variable can also be created as an array. To create an array variable, select Any as the type, and in the next step, define an initial value that uses the expression [] to\n                  represent an empty array.\n\n\nOptional: Add an initial value to set the starting value for the variable at the beginning of each user session. For example, your customers can use an assistant to make purchases. You might initialize a Payment due                  variable with a starting value of 0, and then add to that value as the customer orders items.\nTo specify a complex object or an array as the initial value, or to calculate the initial value based on other variables, you can write an expression. For more information about writing expressions, see Writing expressions.\n\n\nOptional: Add a description.\n\n\nOptional: Select the Protect data stored in this variable checkbox in the Privacy section if the session variable contains confidential information.\n\n\nClick Apply.
Built-in variables	Using variables to manage conversation information	Built-in variables\nIn addition to the variables you create, watsonx Assistant provides a set of built-in variables you can access from any action. At run time, these variables are automatically set with the appropriate values. For example, the Current time              session variable always provides the current time in the user's time zone, at the time of the interaction with the customer.\nTo see these variables, click Variables on the Actions page.\n\n\nThe Set by assistant page shows built-in session variables that are automatically provided for each assistant.\n\n\nThe Set by integration page shows variables that are automatically provided by the integration your customer is using to connect to the assistant. (These variables are not set if no integration is connected.)\n\n\nSet by assistant:\n\nVariables set by assistant\n\n\nVariable name\nVariable ID\nDescription\nExamples\n\n\n\n\nDigressed from\ndigressed_from\nLast action before the customer digressed (or null if not digressed)\nPay bill\n\n\nNow\nnow\nThe current date and time in the user's time zone.\n2021-08-11T11:28:02\n\n\nCurrent time\ncurrent_time\nThe current time in the user's time zone.\n11:28:02\n\n\nCurrent date\ncurrent_date\nThe current date in the user's time zone.\n2021-08-11\n\n\nFallback reason\nfallback_reason\nThe reason why a user is routed to the fallback action\nStep validation failed - Agent requested - No action matches\n\n\nNo action matches count\nno_action_matches_count\nRepresents a count of customer's consecutive unrecognized input attempts\n3\n\n\nSession history IBM Cloud\nsession_history\nThe 24 most recent messages from the customer’s conversation. For more information, see Session history\n[{u : 'book a flight', n : true}, {a : 'sure! from where?'}]\n\n\n\nSet by integration:\n\nVariables set by integration\n\n\nVariable name\nVariable ID\nDescription\nExample\n\n\n\n\nTimezone\ntimezone\nThe user's time zone as specified by the integration or API client. The default time zone (if not specified by the integration) is Coordinated Universal Time.\nAmerica/New_York
Built-in variables	Using variables to manage conversation information	Locale\nlocale\nThe user's locale as set by the integration or API client. The locale can affect understanding and formatting of dates, times, and numbers.\nen-gb\n\n\nChannel Name\nchannel_name\nThe name of the channel that your user is interacting with.\nWeb chat
Storing a value in a session variable	Using variables to manage conversation information	Storing a value in a session variable\nAny action can store a value in a session variable so it is available to other actions. To store a value in a session variable:\n\n\nFrom within a step, click Set variable values.\n\n\nClick Set new value.\n\n\nIn the Set drop-down list, your choices are:\n\nSet variable values\n\n\nChoice\nDescription\n\n\n\n\nSession variable\nThe session variable that you want to store the value in. The new value replaces any previous value that is stored.\n\n\nIntegration variable\nThe session variable that you want to store the value in. The new value replaces any previous value that is stored.\n\n\nExpression\nWrite an expression directly without first picking a variable. For more information, see Writing expressions.\n\n\n+ New session variable\nYou can create a new session variable, which is added to the list of session variables for the assistant. For more information, see Creating a session variable.\n\n\n\n\n\nIn the To drop-down list, the choices vary depending on the type of variable you're setting. Possible choices include:\n\nSet variable values\n\n\nChoice\nDescription\n\n\n\n\nScalar value by type\nSet a specific value for each variable type. The choice varies depending on the variable type. For example, for a date variable, the choice is Enter a date, and you can use a date picker to set a date. Other choices\n                      appear for Boolean, confirmation, currency, date, free text, number, percentage, and time.\n\n\nExpression\nWrite an expression to define the value for the session variable. For more information about expressions, see Writing expressions.\n\n\nAction variables\nSelect an action variable to use the value of a customer response in another step. The choices that are listed match the type of variable that you want to set.\n\n\nSession variables\nSelect another session variable to use its value. The choices that are listed match the type of variable that you want to set.\n\n\nAssistant variables\nSelect a built-in system variable to use its value. The choices that are listed match the type of variable that you want to set.\n\n\nIntegration variables\nIf you are setting an integration variable, you can choose other integration variables as the value.\n\n\n\n\n\nTo set more variable values in the same step, click Set new value.
Using variables to manage conversation flow	Using variables to manage conversation information	\nUsing variables to manage conversation flow\nOne of the ways you can use variables is to choose the correct path through the conversation, based on customer responses and other values available at run time. You can do this by defining step conditions, which determine whether a specific\n            step in an action is executed based on runtime conditions.\nBy defining a condition based on an action variable, you can control whether a step is executed based on the customer's response to a previous step. You can also build step conditions based on session variables, which can store information from\n            other actions.\nFor more information about step conditions, see Defining step conditions.\n
Using variables to customize the conversation	Using variables to manage conversation information	Using variables to customize the conversation\nYou can also use variables in what your assistant says, dynamically referencing information that has been collected during the conversation. This is useful for confirming information the customer has provided (for example, You want to transfer $153.14 to your checking account. Is that correct?),\n            and for simply personalizing the conversation to make it more human (Hi, John. How can I help you today?).\nTo reference a variable in what your assistant says:\n\n\nIn the Assistant says field, start typing the text for the response.\n\n\nWhen you reach a point where you want to insert a reference to a variable, type a dollar sign ($) or click the Insert a variable icon (). A list\n                appears showing the variables you can choose from.\n\n\nClick a variable to add a reference to it in the text.\n\n\nWhen you reference a variable, it appears using a default format in your assistant's response. The format of the variable might differ from the way the value is stored; for example, a date value of 2021-08-11 is formatted as August 11, 2021            by default.\nThe default formats are as follows:\n\nDefault formats for variables\n\n\nType\nFormat\nExamples\n\n\n\n\nOptions\nAs chosen by the user\nYes No\n\n\nNumber\nNumerals only\n1000\n\n\nDate\nMmm DD, YYYY\nJun 30, 2021\n\n\nTime\nH:MM:SS AM\n5:15:00 PM\n\n\nCurrency\nNumber only, no currency symbol\n20\n\n\nPercent\nNumber only, no percentage symbol\n20\n\n\nFree text\nAs entered by the user\nPlease check that the apples aren't bruised\n\n\n\nWhen building an assistant response that includes variables, you concatenate multiple parts (text strings and variables). A single response can consist of no more than 30 concatenated parts (for example, 15 variables along with 15 text strings).
Referencing expressions	Using variables to manage conversation information	\nReferencing expressions\nIf you need to reference a dynamic value that is calculated using an expression, you must first assign this value to a session variable. (For more information about how to do this, see Storing a value in a session variable.)\n              You can then reference the session variable in the Assistant says field.\nNote that the <?...?> syntax for referencing expressions in assistant output is not supported in actions.\n
Configuring suggestions	Configuring suggestions	Configuring suggestions\nSuggestions give your customers a way to try something else when the current exchange with the assistant isn't delivering what they expect. A question mark icon  is displayed\n          in the web chat that customers can click at any time to see other topics that might be of interest or, if configured, to request support. Customers can click a suggested topic to submit it as input or click the X icon to close\n          the suggestions list.\nIf customers select a suggestion and the response is not helpful, they can open the suggestions list again to try a different suggestion. The input generated by the first choice is submitted and recorded as part of the conversation. However, any\n          contextual information that is generated by the initial suggestion is reset when the subsequent suggestion is submitted.\nThe suggestions are shown automatically in situations where the customer might otherwise become frustrated. For example, if a customer uses different wording to ask the same question multiple times in succession, and the same action is triggered\n          each time, then related topic suggestions are shown in addition to the triggered action's response. The suggestions that are offered give the customer a quick way to get the conversation back on track.\nThe suggestions list is populated with actions that are relevant in some way to the matched action. The actions are ones that the AI model considered to be possible alternatives, but that didn't meet the high confidence threshold that is required\n          for an action to be listed as a disambiguation option. Any action can be shown as a suggestion, unless its Ask clarifying question setting is set to Off. For more information about the Ask clarifying question          setting, see Asking clarifying questions.\nTo configure suggestions, complete the following steps:\n\n\nOpen the Suggestions tab.\nSuggestions are enabled automatically for new web chat integrations. If you don't want to use suggestions, toggle the switch to Off.
Configuring suggestions	Configuring suggestions	In the Include a connection to support section, specify when you want an option to connect with support to be included in the list of suggestions. You can specify Always, Never, or After one failed attempt.\nAfter one failed attempt: Adds the option to the list only if the customer reached a node with an anything_else condition in the previous conversation turn or reaches the same action for a second time in succession.\n\n\nIn the Option label field, type the text of the message that requests help from support. This message is shown as the label for the support option, which is included in the Suggestions window under the circumstances\n              you specified in the previous step. If the customer clicks this option, the same message is sent to the assistant.\nThe message you specify should trigger an action that gives customers a way to connect with support. By default, the message Connect with agent is used. If your web chat is integrated with a contact center platform, this message\n              initiates a transfer to a human agent. (For more information about integrating with a contact center, see Adding contact center support.)\nIf your web chat is not integrated with a contact center, specify a message that helps your customers reach whatever form of support you do offer. If you offer a toll-free support line, you might add Get the support line phone number.\n              Or if you offer an online support request form, you might add Open a support ticket.\nWhether you use the default support message or add your own, make sure your action is designed to recognize the message and respond to it appropriately.
Web chat overview	Web chat overview	\nWeb chat overview\nYou can use the web chat integration to deploy your assistant on your website or embed it as a WebView in your mobile app. The web chat integration provides an easy-to-use chatbot interface that can integrate seamlessly with your site, without\n          requiring the time and effort that would be required to build your own custom user interface.\nThe web chat can help your customers start the conversation with common questions or tasks; it can display multimedia and interactive elements such as forms, and it can transfer customers to human agents for more help. A developer can customize\n          the web chat to add even more capabilities.\n
Why use the web chat?	Web chat overview	Why use the web chat?\nBuilding a custom user interface requires spending time and effort solving typical UI problems. For example, you need to design the layout and styling, keep up with browser changes, manage scrolling behavior, validate input, and comply with\n            accessibility requirements. The time you spend building and maintaining a custom UI is better spent building a high-quality assistant instead.\nThe web chat widget uses cutting-edge functionality from IBM Design and Research to engage your users when they need help, answer their questions quickly and efficiently, and provide fallback options so there is always a path to a solution.\n            The web chat is easy for you to deploy and easy for customers to use, it is secure, and it supports a wide range of desktop and mobile browsers.\nThe web chat is also customizable, which means that you can take advantage of the web chat functionality while still maintaining consistency with your website style and branding, adding custom UI elements, and integrating with external systems\n            (such as live agent tools or CRM systems).
What you can do with the web chat	Web chat overview	What you can do with the web chat\nYou can quickly deploy the web chat to your website (or even to a local test page) and see how it works. You can also use the web chat integration settings in the watsonx Assistant user interface to configure the web chat for your website and\n            your customers.\nIf you are a developer, you can further customize and extend the web chat by writing code and using the web chat API. You can also use a WebView with a JavaScript bridge to add the web chat to your mobile app.\nThe following documentation topics provide more information about the capabilities of the web chat integration, how to configure and deploy it, and how to customize it.\n\nHow the web chat works: Overview of web chat capabilities and architecture\nEmbedding the web chat on your page: How to embed the web chat widget on your website\nWeb chat setup: How to configure the web chat using the integration settings\nWeb chat development: How to customize and extend the web chat by writing code\nAdding contact center support: How to integrate the web chat with a contact center platform so you can connect your customers to human agents
Advanced analysis and log-related tasks	Advanced analysis and log-related tasks	\nAdvanced analysis and log-related tasks\n
Classic experience only	Advanced analysis and log-related tasks	\nClassic experience only\nThis information applies to dialog skill analytics in the classic experience. For information about analytics in watsonx Assistant, see Use analytics to review your entire assistant at a glance.\nLearn about notebooks and APIs that you can use to access and analyze log data.\n
Using Jupyter notebooks for analysis	Advanced analysis and log-related tasks	\nUsing Jupyter notebooks for analysis\nIBM created Jupyter notebooks that you can use to analyze the behavior or your assistant. A Jupyter notebook is a web-based environment for interactive computing. You can run small pieces of code that process your data, and you can immediately\n            view the results of your computation.\nYou can use the notebooks with English-language skills only.\n
Analysis notebooks	Advanced analysis and log-related tasks	\nAnalysis notebooks\nAnalysis notebooks are available for:\n\nIBM Watson® Studio\nStandard Python tools\n\nWatson Studio provides an environment where you can:\n\nChoose the tools that you need to analyze and visualize data.\nCleanse and shape data.\nIngest streaming data.\nCreate, train, and deploy machine learning models.\n\nFor more information, see the product documentation.\nThe watsonx Assistant Continuous Improvement Best Practices Guide              describes how to get the most out of these notebooks.\n
Using the notebooks with Watson Studio	Advanced analysis and log-related tasks	Using the notebooks with Watson Studio\nThe following notebooks are available:\n\nDialog skill analysis for watsonx Assistant\nMeasure watsonx Assistant Performance.\nAnalyze watsonx Assistant Effectiveness\nDialog Flow Analysis for watsonx Assistant\n\nIf you choose to use the notebooks that are designed for use with Watson Studio, the steps are:\n\n\nCreate a Watson Studio account, create a project, and add a Cloud Object Storage account to it.\n\n\nFrom the Watson Studio community, choose a notebook.\nEarly in the development process, use the Dialog skill analysis for watsonx Assistant notebook to help you get started. The notebook:\n\nExamines the terms that are correlated with each intent in your training data to find anomalies that might identify problems that you can investigate.\nUses a blind test set that you provide to calculate performance on statistical metrics like Accuracy, Precision, Recall, and F1.\nOffers advanced features that you can use to find the causes of common issues, such as why some sentences are often misidentified.\n\nTo learn more about how this notebook can help you improve your dialog, read Dialog skill analysis.\n\n\nAfter you deploy a version of the assistant and collect conversation log data, run the Measure watsonx Assistant Performance notebook.\n\n\nFollow the step-by-step instructions provided with the notebook to analyze a subset of the dialog exchanges from the logs.\nRun the following notebook first:\n\nMeasure: Gathers metrics that focus on coverage (how often the assistant is confident enough to respond to users) and effectiveness (when the assistant does respond, whether the responses are satisfying user needs).\n\nThe insights are visualized in ways that make it easier to understand areas for improvement in your assistant.\n\n\nExport a sample set of the logs from ineffective conversations, and then analyze and annotate them.\nFor example, indicate whether a response is correct. If correct, mark whether it is helpful. If a response is incorrect, then identify the root cause, the wrong intent or entity was detected, for example, or the wrong dialog node was triggered.\n                  After you identify the root cause, indicate what is the correct choice.\n\n\nFeed the annotated spreadsheet to the Analyze watsonx Assistant Effectiveness notebook.\n\nEffectiveness: Provides a deeper analysis of your logs to help you understand the steps that you can take to improve your assistant.
Using the notebooks with Watson Studio	Advanced analysis and log-related tasks	Use the Dialog Flow Analysis for watsonx Assistant notebook to review your dialog. The notebook can help you pinpoint the dialog nodes where customers most frequently abandon the conversation.\nFor more information about how this notebook can help you analyze and assess abandonment, see Do you know where and why users drop off the conversation?.\n\n\nThis process helps you to understand the steps you can take to improve your assistant.
Using the notebooks with standard Python tools	Advanced analysis and log-related tasks	\nUsing the notebooks with standard Python tools\nIf you choose to use standard Python tools to run the notebooks, you can get the notebooks from GitHub.\n\nDialog Skill Analysis for watsonx Assistant\nIBM® watsonx™ Assistant Recommendation notebooks (Measure and Analyze Effectiveness)\nIBM® watsonx™ Assistant Dialog Flow Analysis notebook\n\nThe watsonx Assistant Continuous Improvement Best Practices Guide              outlines which notebook to use at each stage of your improvement process.\n
Using the logs API	Advanced analysis and log-related tasks	\nUsing the logs API\nYou can use the /logs API to list events from the transcripts of conversations that occurred between your users and your assistant. For conversations created with the v2 /message API, use the instance-level endpoint\n            to list log events in all workspaces, and then filter by Assistant ID. For more information, see Filter query reference.\nThe API logs messages that are exchanged in conversations that are defined by a dialog skill only.\nThe number of days that logs are stored differs by service plan type. For more information, see Log limits.\nFor a Python script you can run to export logs and convert them to CSV format, download the export_logs_py.py file from the watsonx Assistant GitHub repository).\n
Understanding terminology	Advanced analysis and log-related tasks	Understanding terminology\nFirst, review the definitions of terms that are associated with Watson Assistant logs.\n\nTerminology\n\n\nTerm\nDefinition\n\n\n\n\nAssistant\nAn application - sometimes referred to as a 'chat bot' - that implements your Watson Assistant content.\n\n\nAssistant ID\nThe unique identifier of an assistant.\n\n\nConversation\nA set of messages that an individual user sends to your assistant, and the messages your assistant sends back.\n\n\nConversation ID\nUnique identifier that is added to individual message calls to link related message exchanges together. App developers that use the V1 version of the Watson Assistant API add this value to the message calls in a conversation by including\n                  the ID in the metadata of the context object.\n\n\nCustomer ID\nA unique ID that can be used to label customer data such that it can be deleted if the customer requests the removal of their data.\n\n\nDeployment ID\nA unique label that app developers of the Watson Assistant API V1 version pass with each user message to help identify the deployment environment that produced the message.\n\n\nInstance\nYour deployment of Watson Assistant, accessible with unique credentials. A {{site.data.keassistant_classic_shortnshort}} instance might contain multiple assistants.\n\n\nMessage\nA message is a single utterance that a user sends to the assistant.\n\n\nSkill ID\nThe unique identifier of a skill.\n\n\nUser\nA user is anyone who interacts with your assistant.\n\n\nUser ID\nA unique label that is used to track the level of service usage of a specific user.\n\n\n\nThe User ID property is not equivalent to the Customer ID property, though both can be passed with the message. The User ID field is used to track levels of usage for billing purposes. The Customer ID            field is used to support the labeling and subsequent deletion of messages that are associated with users. Customer ID is used consistently across all Watson services and is specified in the X-Watson-Metadata header. User ID is\n            used exclusively by the Watson Assistant service and is passed in the context object of each /message API call.
Associating message data with a user for deletion	Advanced analysis and log-related tasks	\nAssociating message data with a user for deletion\nThere may be cases when you want to completely remove a set of your user's data from a Watson Assistant instance. When the delete feature is used, the Overview metrics don't include those deleted messages, and results in fewer Total Conversations.\n
Before you begin	Advanced analysis and log-related tasks	"Before you begin\nTo delete messages for one or more individuals, you first need to associate a message with a unique Customer ID for each individual. To specify the Customer ID for any message that is sent with the /message              API, include the X-Watson-Metadata: customer_id property in your header. You can pass multiple Customer ID entries with semicolon separated field=value pairs, by using customer_id,\n              as in the following example:\ncurl -X POST -u ""apikey:3Df... ...Y7Pc9"" \\n --header \\n   ""Content-Type: application/json"" \\n   ""X-Watson-Metadata: customer_id={first-customer-ID};customer_id={second-customer-ID}"" \\n --data ""{\""input\"":{\""text\"":\""hello\""}}"" \\n ""{url}/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2019-02-28""\n\nwhere {url} is the appropriate URL for your instance. For more information, see Endpoint URLs.\nThe customer_id string cannot include the semicolon (;) or equal sign (=) characters. You are responsible for ensuring that each Customer ID parameter is unique across your customers.\nFor instructions on how to delete messages that use customer_id values, see the Labeling and deleting data in watsonx Assistant."
Adding conditions to an action	Adding conditions to an action	Adding conditions to an action\nIBM Cloud\nAn action condition is a Boolean test, based on some runtime value; the action runs only if the test evaluates as true. This test can be applied to any variable. By defining action conditions, you can do things such as control user access to actions\n          or create date-specific actions.\nFor more information about variables, see Using variables to manage conversation information.\nA basic action condition is expressed in the following form:\nIf {variable} {operator} {value}\nwhere:\n\n{variable} is the name of a variable or an expression.\n{operator} is the type of test to apply to the variable value (for example, is or is not).\n{value} is the value to compare to the variable.\n\nFor example, an action condition might read:\nIf User category? is employee\nIn this example, User category can be a list of employees at your organization. This condition evaluates as true if the user is an active employee. If false, you can control access so that former employees can't use the action.\nConditions can be grouped to construct complex tests.\nTo add an action condition:\n\n\nIn an action, click Customer starts with.\n\n\nClick Conditions.\n\n\n\nConditions\n\n\n\n\nChoose the variable for the condition. You can select:\n\nAn action variable with the customer response from a previous step in the action\nA session variable that contains a value that is stored by any action\nA built-in variable set by the assistant or by an integration\n\nYou can also define a complex condition by writing an expression that defines some other value. For more information about expressions, see Writing expressions.\n\n\nSelect the operator that represents the test that you want to perform on the variable (for example, is or is not). The available operators for a particular value depend upon its data type. For more information, see\n              Operators.\n\n\nSelect the value that you want to evaluate the condition against. The values available depend upon the type of value that you are testing. For example, a variable that contains an options response can be tested against any of the defined options,\n              and a date value can be tested against any date.\n\n\n\nConditions
Adding conditions to an action	Adding conditions to an action	Conditions\n\n\n\n\nTo add more than one condition to an action, click Add condition.\n\n\nTo add another group of conditions, click New condition group.\nYou can use groups to build complex action conditions. Each group is evaluated true or false as a whole, and then these results are evaluated together. For example, you might build an action that runs only if all conditions in group 1 are\n              true or any condition in group 2 is true. (Groups function like parentheses in the Boolean conditions of many programming languages.)\nAfter you add a group, you can define one or more conditions in the new group. Between groups, choose and or or to indicate whether the conditions in both conditional groups or only one of them must be met\n              for the step to be included in the conversational flow.
Operators	Adding conditions to an action	\nOperators\nAn operator specifies the kind of test that you are performing on a value in a condition. The specific operators available in a condition depend on the customer response type of the value, as shown in the following table.\n\nOperators\n\n\nResponse type\nOperators\n\n\n\n\n\n\nOptions\n\n\n\n\nis\nis not\nis any of\nis none of\n\n\n\n\n\n\nRegex\n\n\n\n\nis\nis not\n\n\n\n\n\n\nNumber\nCurrency\nPercent\n\n\n\n\nis defined\nis not defined\nis equal to (==)\nis not equal to (≠)\nis less than (<)\nis less than or equal to (<=)\nis greater than (>)\nis greater than or equal to (>=)\n\n\n\n\n\n\nDate\n\n\n\n\nis defined\nis not defined\nis on (also allows specific day of the week)\nis not on\nis before\nis after\nis on or before\nis on or after\n\n\n\n\n\n\nTime\n\n\n\n\nis defined\nis not defined\nis at\nis not at\nis before\nis after\nis at or before\nis at or after\n\n\n\n\n\n\nFree text\n\n\n\n\nis\nis not\ncontains\ndoes not contain\nmatches\ndoes not match\n\n\n\n\n\n
Creating intents	Creating intents	\nCreating intents\nIntents are purposes or goals that are expressed in a customer's input, such as answering a question or processing a bill payment. By recognizing the intent expressed in a customer's input, the watsonx Assistant service can choose the\n          correct dialog flow for responding to it.\n
Intent creation overview	Creating intents	Intent creation overview\n\n\nPlan the intents for your application.\nConsider what your customers might want to do, and what you want your application to be able to handle on their behalf. For example, you might want your application to help your customers make a purchase. If so, you can add a #buy_something                intent. (The # that is added as a prefix to the intent name helps to clearly identify it as an intent.)\n\n\nTeach watsonx Assistant about your intents.\nAfter you decide which business requests that you want your application to handle for your customers, you must teach watsonx Assistant about them. For each business goal (such as #buy_something), you must provide at least 5\n                examples of utterances that your customers typically use to indicate their goal. For example, I want to make a purchase.\nIdeally, find real-world user utterance examples that you can extract from existing business processes. Tailor the user examples to your specific business. For example, if you are an insurance company, a user example might look more like\n                this, I want to buy a new XYZ insurance plan.\nYour assistant uses the examples that you provide to build a machine learning model that can recognize the same and similar types of utterances and map them to the appropriate intent.\n\n\nStart with a few intents, and test them as you iteratively expand the scope of the application.
Creating intents	Creating intents	"Creating intents\n\n\nClick Intents.\n\n\nSelect Create intent.\n\n\nIn the Intent name field, type a name for the intent.\n\nThe intent name can contain letters (in Unicode), numbers, underscores, hyphens, and periods.\nThe name cannot consist of .. or any other string of only periods.\nIntent names cannot contain spaces and must not exceed 128 characters. The following are examples of intent names:\n                  \n#weather_conditions\n#pay_bill\n#escalate_to_agent\n\n\n\nA number sign # prefix is included in the intent name automatically to help identify the term as an intent. You do not need to add it.\nKeep the name as short as possible for readability in the ""Try it out"" pane and conversation logs.\nOptionally add a description of the intent in the Description field.\n\n\nSelect Create intent to save your intent name.\n\n\n\nNew intent\n\n\n\n\nIn the User example field, type the text of a user example for the intent. An example can be any string up to 1,024 characters in length. The following utterances might be examples for the #pay_bill intent:\n\nI need to pay my bill.\nPay my account balance\nmake a payment\n\nTo learn about the impact of including references to entities in your user examples, see How entity references are treated.\nIntent names and example text can be shown in URLs when an application interacts with watsonx Assistant. Do not include sensitive or personal information in these artifacts.\n\n\nClick Add example to save the user example.\n\n\n\nAdd user example\n\n\n\n\nRepeat the same process to add more examples.\nProvide at least five examples for each intent.\n\n\nWhen you are done adding examples, click the close arrow  to finish creating the intent.\n\n\nThe system trains itself on the intent and user examples you added.\nImportant:"
Creating intents	Creating intents	Intent example data should be representative and typical of data that your users provide. Examples can be collected from actual user data, or from people who are experts in your specific field. The representative and accurate nature of the\n              data is important.\nBoth training and test data (for evaluation purposes) should reflect the distribution of intents in real usage. Generally, more frequent intents have relatively more examples, and better response coverage.\nYou can include punctuation in the example text if it appears naturally. If you believe that some users express their intents with examples that include punctuation, and some users will not, include both versions. Generally, the more coverage\n              for various patterns, the better the response.
How entity references are treated	Creating intents	\nHow entity references are treated\nWhen you include an entity mention in a user example, the machine learning model uses the information in different ways in these scenarios:\n\nReferencing entity values and synonyms in intent examples\nAnnotated mentions\nDirectly referencing an entity name in an intent example\n\n
Referencing entity values and synonyms in intent examples	Creating intents	\nReferencing entity values and synonyms in intent examples\nIf you define, or plan to define, entities that are related to this intent, mention the entity values or synonyms in some of the examples. Doing so helps to establish a relationship between the intent and entities. It is a weak relationship,\n              but it does inform the model.\n
Annotated mentions	Creating intents	\nAnnotated mentions\nAs you define entities, you can annotate mentions of the entity directly from your existing intent user examples. A relationship that you identify in this way between the intent and the entity is not used by the intent classification\n              model. However, when you add the mention to the entity, it is also added to that entity as new value. And when you add the mention to an existing entity value, it is also added to that entity value as a new synonym. Intent classification\n              does use these types of dictionary references in intent user examples to establish a weak reference between an intent and an entity.\n
Directly referencing an entity name in an intent example	Creating intents	Directly referencing an entity name in an intent example\nThis approach is advanced. If used, it must be used consistently.\nYou can choose to directly reference entities in your intent examples. For instance, say that you have an entity that is called @PhoneModelName, which contains values Galaxy S8, Moto Z2, LG G6, and Google Pixel 2.\n              When you create an intent, for example #order_phone, you might then provide training data as follows:\n\nCan I get a @PhoneModelName?\nHelp me order a @PhoneModelName.\nIs the @PhoneModelName in stock?\nAdd a @PhoneModelName to my order.\n\n\n\n\nIntent definition\n\n\nCurrently, you can only directly reference synonym entities that you define (pattern values are ignored). You cannot use system entities.\nIf you choose to reference an entity as an intent example (for example, @PhoneModelName) anywhere in your training data it cancels the value of using a direct reference (for example, Galaxy S8) in an intent example\n              anywhere else. All intents will then use the entity-as-an-intent-example approach. You cannot apply this approach for a specific intent only.\nIn practice, this means that if you have previously trained most of your intents based on direct references (Galaxy S8), and you now use entity references (@PhoneModelName) for just one intent, the change impacts your\n              previous training. If you do choose to use @Entity references, you must replace all previous direct references with @Entity references.\nDefining one example intent with an @Entity that has 10 values that are defined for it does not equate to specifying that example intent 10 times. The watsonx Assistant service does not give that much weight to\n              that one example intent syntax.
Testing your intents	Creating intents	"Testing your intents\nAfter you finish creating new intents, you can test the system to see if it recognizes your intents as you expect.\n\n\nClick Try it.\n\n\nIn the ""Try it out"" pane, enter a question or other text string and press Enter to see which intent is recognized. If the wrong intent is recognized, you can improve your model by adding this text as an example to the correct intent.\nIf you make recent changes in your skill, you might see a message that indicates that the system is still retraining. If you see this message, wait until training completes before testing:\nThe response indicates which intent was recognized from your input.\n\n\n\nTest intents\n\n\n\n\nIf the system does not recognize the correct intent, you can correct it. To correct the recognized intent, select the displayed intent and then select the correct intent from the list. After your correction is submitted, the system automatically\n                retrains itself to incorporate the new data.\n\n\n\nCorrecting an intent\n\n\n\n\nIf the input is unrelated to any of the intents in your application, you can teach your assistant that by selecting the displayed intent, and then clicking Mark as irrelevant.\n\n\n\nMark as irrelevnt\n\n\n\n\nIf your intents are not being correctly recognized, consider making the following kinds of changes:\n\nAdd the unrecognized text as an example to the correct intent.\nMove existing examples from one intent to another.\nConsider whether your intents are too similar, and redefine them."
Absolute scoring	Creating intents	\nAbsolute scoring\nThe watsonx Assistant service scores each intent’s confidence independently, not in relation to other intents. This approach adds flexibility; multiple intents can be detected in a single user input. It also means that the system might not return\n            an intent at all. If the top intent has a low confidence score (less than 0.2), the top intent is included in the intents array that is returned by the API, but any nodes that condition on the intent are not triggered. If you want to detect\n            the case when no intents with good confidence scores were detected, use the irrelevant special condition in your dialog node.\nAs intent confidence scores change, your dialogs might need restructuring. For example, if a dialog node uses an intent in its condition, and the intent's confidence score starts to consistently drop below 0.2, the dialog node stops being processed.\n            If the confidence score changes, the behavior of the dialog can also change.\n
Intent limits	Creating intents	\nIntent limits\nThe number of intents and examples you can create depends on your watsonx Assistant plan type:\n\nPlan details\n\n\nPlan\nIntents per skill\nExamples per skill\n\n\n\n\nEnterprise\n2,000\n25,000\n\n\nPremium (legacy)\n2,000\n25,000\n\n\nPlus\n2,000\n25,000\n\n\nTrial\n100\n25,000\n\n\nLite\n100\n25,000\n\n\n\n
Editing intents	Creating intents	\nEditing intents\nYou can click any intent in the list to open it for editing. You can make the following changes:\n\nRename the intent\nDelete the intent\nAdd, edit, or delete examples\nMove examples to a different intent\n\nTo move or delete an example, click the checkbox that is associated with it, and then click Move or Delete.\n\n\n\nMove or delete example\n\n\n
Searching intents	Creating intents	\nSearching intents\nUse the Search feature to find user examples, intent names, and descriptions.\n\n\nFrom the Intents page, click the Search icon .\n\n\nSubmit a search term or phrase. You can also select Include partial match.\nThe first time that you search for something, you might get a message that says the content is being indexed. If so, wait a minute, and then resubmit the search term.\nIntents that contain your search term are displayed.\n\n\n\nSearch results\n\n\n\n\n
Downloading intents	Creating intents	\nDownloading intents\nYou can download a number of intents to a CSV file, so you can then upload and reuse them in another watsonx Assistant application.\n\nGo to the Intents page.\n\n\n\nTo download all intents, meaning the intents that are listed on this and any additional pages, do not select any individual intents. Instead, click the Download all intents icon .\n\n\nTo download the intents that are listed on the current page only, select the checkbox in the header. This action selects all of the intents on the current page. Then, click the Download button.\n\n\nTo download one or more specific intents, select the intents that you want to download, and then click the Download button.\n\n\n\nSpecify the name and location in which to store the CSV file that is generated, and then click Save.\n\n
Uploading intents and examples	Creating intents	Uploading intents and examples\nIf you have many intents and examples, you might find it easier to upload them from a comma-separated value (CSV) file than to define them one by one. Be sure to remove any personal data from the user examples that you include in the file.\n\n\nCollect the intents and examples into a CSV file, or export them from a spreadsheet to a CSV file. The required format for each line in the file is as follows:\n<example>,<intent>\n\nwhere <example> is the text of a user example, and <intent> is the name of the intent you want the example to match. For example:\nTell me the current weather conditions.,weather_conditions\nIs it raining?,weather_conditions\nWhat's the temperature?,weather_conditions\nWhere is your nearest location?,find_location\nDo you have a store in Raleigh?,find_location\n\nImportant: Save the CSV file with UTF-8 encoding and no byte order mark (BOM).\n\n\nFrom the Intents page, click the Upload intents icon .\n\n\nDrag a file or browse to select a file from your computer.\nImportant: The maximum CSV file size is 10 MB. If your CSV file is larger, consider splitting it into multiple files and uploading them separately.\n\n\nClick Upload intents.\nThe file is validated and uploaded, and the system trains itself on the new data.\n\n\nYou can view the uploaded intents and the corresponding examples on the Intents tab. You might need to refresh the page to see the new intents and examples.
Deleting intents	Creating intents	\nDeleting intents\nYou can select a number of intents for deletion.\nBy deleting intents that you are also deleting all associated examples, and these items cannot be retrieved later. All dialog nodes that reference these intents must be updated manually to no longer reference the deleted content.\n\n\nGo to the Intents page\n\n\nTo delete all intents, meaning the intents that are listed on this and any additional pages, do not select any individual intents. Instead, click the Delete all intents icon. \n\n\nTo delete the intents that are listed on the current page only, select the checkbox in the header. This action selects all of the intents that are listed on the current page. Click Delete.\n\n\nTo delete one or more specific intents, select the intents that you want to delete, and then click Delete.\n\n\n\n\n
Accessibility	Accessibility	\nAccessibility\nIBM strives to provide products with usable access for everyone, regardless of age or ability.\nIBM® watsonx™ Assistant uses standard Windows navigation keys.\n
Accessibility features in the product documentation	Accessibility	\nAccessibility features in the product documentation\nAccessibility features help people with a physical disability, such as restricted mobility or limited vision, or with other special needs, use information technology products successfully.\nThe accessibility features in this product documentation allow users to do the following:\n\nUse screen-reader software and digital speech synthesizers to hear what is displayed on the screen. Consult the product documentation of the assistive technology for details on using assistive technologies with HTML-based information.\nUse screen magnifiers to magnify what is displayed on the screen.\nOperate specific or equivalent features by using only the keyboard.\n\nThe documentation content is published in the IBM Cloud Docs site. For information about the accessibility of the site, see Accessibility features for IBM Cloud.\n
Anatomy of a message	Anatomy of a message	"Anatomy of a message\nA single /message API call is equivalent to a single turn in a conversation, which consists of a message that is submitted by a customer and a corresponding response from your assistant.\nEach reply that a customer makes in response to a prompt from the assistant is passed as an independent /message API call.\nThe body of the /message API call request and response includes the following objects:\n\n\ncontext: Contains variables that are meant to be persisted. For the dialog to reference information that is submitted by the user, you must store the information in the context object. For example, the dialog can collect the user's\n              name and then refer to the user by name in subsequent nodes. The following example shows how the context object is represented in the dialog JSON editor:\n{\n  ""context"" : {\n    ""user_name"" : ""<? @name.literal ?>""\n  }\n\nFor more information, see Retaining information across dialog turns.\n\n\ninput: The string of text that was submitted by the user. The text string can contain up to 2,048 characters. The following example shows how the input object is represented in the dialog JSON editor:\n{\n  ""input"" : {\n    ""text"" : ""Where's your nearest store?""\n  }\n\n\n\noutput: The dialog response to return to the user. The following example shows how the output object is represented in the dialog JSON editor:\n{\n""output"": {\n  ""generic"": [\n    {\n      ""values"": [\n        {\n          ""text"": ""This is my response text.""\n        }\n      ],\n      ""response_type"": ""text"",\n      ""selection_policy"": ""sequential""\n    }\n  ]\n}\n}\n\n\n\nIn the resulting API /message response, the text response is formatted as follows:\n{\n   ""text"": ""This is my response text."",\n   ""response_type"": ""text""\n}"
Anatomy of a message	Anatomy of a message	You can define more response types other than a text response. See Responses for more details.\nFor more information about the /message API call, see the API reference.\nFor information about how to refer to these message objects within a conversation, see Expressions for accessing objects.
Viewing API call details	Anatomy of a message	\nViewing API call details\nAs you test your conversation, you might want to know what the underlying API calls look like that are being returned from the service. You can use the developer tools that are provided by your web browser to inspect them.\nFrom Chrome, for example:\n\n\nOpen the developer tools.\n\n\nOpen the Network tool. The Name section lists multiple API calls.\n\n\nClick the message call that is associated with your test utterance\n\n\nClick the Response column to see the API response body. It lists the intents and entities that were recognized in the user input with their confidence scores. It also lists the values of context variables at the time of\n                the call.\n\n\n\n\n\nUse Chrome developer tools to see API response\n\n\n\nTo view the response body in structured format, click the Preview column.\n\n
Personalizing the dialog with context	Personalizing the dialog with context	\nPersonalizing the dialog with context\nTo personalize the conversation, your assistant can collect information from the customer and then refer to it later in the conversation.\n
Retaining information across dialog turns	Personalizing the dialog with context	\nRetaining information across dialog turns\nThe dialog is stateless, meaning that it does not retain information from one interaction with the user to the next. When you add a dialog to an assistant and deploy it, the assistant saves the context from one message call, and then resubmits\n            it on the next request throughout the current session. The current session lasts while a user interacts with the assistant plus the designated session inactivity time frame. The maximum session inactivity time allowed ranges from 5 minutes\n            to 7 days, depending on your plan type. If you do not add the dialog to an assistant, it is your responsibility as the custom application developer to maintain any continuing information that the application needs.\nThe application can pass information to the dialog, and the dialog can update this information and pass it back to the application, or to a subsequent node. The dialog does so by using context variables.\n
Context variables	Personalizing the dialog with context	\nContext variables\nA context variable is a variable that you define in a node. You can specify a default value for it. Then, other nodes, application logic, or user input can set or change the value of the context variable.\nYou can condition against context variable values by referencing a context variable from a dialog node condition to determine whether to execute a node. You can also reference a context variable from dialog node response conditions to show different\n            responses depending on a value that is provided by an external service or by the user.\nLearn more:\n\nPassing context from the application\nPassing context from node to node\nDefining a context variable\nCommon context variable tasks\nDeleting a context variable\nUpdating a context variable\nHow context variables are processed\nOrder of operation\nAdding context variables to a node with slots\n\n
Passing context from the application	Personalizing the dialog with context	\nPassing context from the application\nPass information from the application to the dialog by setting a context variable and passing the context variable to the dialog.\nFor example, your application can set a $time_of_day context variable, and pass it to the dialog that can use the information to tailor the greeting it shows to the user.\n\n\n\nTime of day context\n\n\nIn this example, the dialog knows that the application sets the variable to one of these values: morning, afternoon, or evening. It can check for each value, and depending on which value is present, return the appropriate\n              greeting. If the variable is not passed or has a value that does not match one of the expected values, then a more generic greeting is displayed to the user.\n
Passing context from node to node	Personalizing the dialog with context	\nPassing context from node to node\nThe dialog can also add context variables to pass information from one node to another or to update the values of context variables. As the dialog asks for and gets information from the user, it can track the information and reference it later\n              in the conversation.\nFor example, in one node you might ask users for their name, and in a later node address them by name.\n\n\n\nPass context from one node to another\n\n\nIn this example, the system entity @name is used to extract the user's name from the input if the user provides one. In the JSON editor, the username context variable is defined and set to the @name value. In a subsequent node, the $username\n              context variable is included in the response to address the user by name.\n
Defining a context variable	Personalizing the dialog with context	"Defining a context variable\nDefine a context variable by adding the variable name to the Variable field and adding a default value for it to the Value field in the node's edit view.\n\n\nClick to open the dialog node to which you want to add a context variable.\n\n\nGo to the Assistant responds section and click the menu icon .\n\n\nClick Open context editor.\n\n\nAdd the variable name and value pair to the Variable and Value fields.\n\n\nThe name can contain any upper- and lowercase alphabet characters, numeric characters (0-9), and underscores.\n\n\nThe value can be any supported JSON type, such as a simple string variable, a number, a JSON array, or a JSON object.\n\n\n\n\nThe following table shows some examples of how to define name and value pairs for different types of values:\n\nDefine name and value pairs\n\n\nVariable\nValue\nValue Type\n\n\n\n\ndessert\n""cake""\nString\n\n\nage\n18\nNumber\n\n\ntoppings_array\n[""onions"",""olives""]\nJSON Array\n\n\nfull_name\n{""first"":""John"",""last"":""Doe""}\nJSON Object\n\n\n\nThen, to refer to these context variables, use the syntax $name where name is the name of the context variable that you defined.\nFor example, you might specify the following expression as the dialog response:\nThe customer, $age-year-old <? $full_name.first ?>, wants a pizza with <? $toppings_array.join(' and ') ?>, and then $dessert.\nThe resulting output is displayed as follows:\nThe customer, 18-year-old John, wants a pizza with onions and olives, and then cake.\nYou can use the JSON editor to define context variables also. You might prefer to use the JSON editor if you want to add a complex expression as the variable value. See Context variables in the JSON editor              for more details."
Common context variable tasks	Personalizing the dialog with context	Common context variable tasks\nTo store the entire string that was provided by the user as input, use input.text:\n\nCapturing user input\n\n\nVariable\nValue\n\n\n\n\nrepeat\n<?input.text?>\n\n\n\nFor example, the user input might be, I want to order a device. If the node response is, You said: $repeat, then the response would be displayed as, You said: I want to order a device.\nTo store the value of an entity in a context variable, use this syntax:\n\nCapturing an entity mention\n\n\nVariable\nValue\n\n\n\n\nplace\n@place\n\n\n\nFor example, the user input might be, I want to go to Paris. If your @place entity recognizes Paris, then your assistant saves Paris in the $place context variable.\nTo store the value of a string that you extract from the user's input, you can include a SpEL expression that uses the extract method to apply a regular expression to the user input. The following expression extracts a number\n              from the user input, and saves it to the $number context variable.\n\nUsing a String method\n\n\nVariable\nValue\n\n\n\n\nnumber\n<?input.text.extract('[\d]+',0)?>\n\n\n\nTo store the value of a pattern entity, append .literal to the entity name. Using this syntax make sure that the exact span of text from user input that matched the specified pattern is stored in the variable.\n\nCapturing a pattern entity value\n\n\nVariable\nValue\n\n\n\n\nemail\n<? @email.literal ?>\n\n\n\nFor example, the user input is Contact me at joe@example.com. Your entity that is named @email recognizes the name@domain.com email format. By configuring the context variable to store @email.literal,\n              you indicate that you want to store the part of the input that matched the pattern. If you omit the .literal property from the value expression, then the entity value name that you specified for the pattern is returned instead\n              of the segment of user input that matched the pattern.
Deleting a context variable	Personalizing the dialog with context	\nDeleting a context variable\nTo delete a context variable, set the variable to null.\n\nNulling a context variable\n\n\nVariable\nValue\n\n\n\n\norder_form\nnull\n\n\n\n
Updating a context variable value	Personalizing the dialog with context	\nUpdating a context variable value\nTo update a context variable's value, define a context variable with the same name as the previous context variable, but this time, specify a different value for it.\nWhen more than one node sets the value of the same context variable, the value for the context variable can change over the course of a conversation with a user. The value that is applied depends on which node is being triggered by the user\n              in the course of the conversation. The value specified for the context variable in the last node that is processed overwrites any values that were set for the variable by nodes that were processed previously.\nFor information about how to update the value of a context variable when the value is a JSON object or JSON array data type, see Updating a context variable value in JSON\n
How context variables are processed	Personalizing the dialog with context	\nHow context variables are processed\nWhere you define the context variable matters. The context variable is not created and set to the value that you specify for it until your assistant processes the part of the dialog node where you defined the context variable. In most cases,\n              you define the context variable as part of the node response. When you do so, the context variable is created and given the specified value when your assistant returns the node response.\nFor a node with conditional responses, the context variable is created and set when the condition for a specific response is met and that response is processed. For example, if you define a context variable for conditional response #1 and\n              your assistant processes response #2, then the variable that you defined for conditional response #1 is not set.\nFor information about adding context variables that you want your assistant to set as a user interacts with a node with slots, see Adding context variables to a node with slots.\n
Order of operation	Personalizing the dialog with context	Order of operation\nWhen you define multiple variables to be processed together, the order in which you define them does not determine the order in which they are evaluated by your assistant. Your assistant evaluates the variables in random order. Don't set a\n              value in the first context variable and expect to use it in the second variable because the first context variable might not be executed before the second one. For example, do not use two context variables to implement logic that checks\n              whether the user input contains the word Yes in it.\n\nUsing two context variables to check for a value in user input\n\n\nVariable\nValue\n\n\n\n\nuser_input\n<? input.text ?>\n\n\ncontains_yes\n<? $user_input.contains('Yes') ?>\n\n\n\nInstead, use a slightly more complex expression to avoid having to rely on the value of the first variable in your list (user_input) being evaluated before the second variable (contains_yes) is evaluated.\n\nUsing a single context variable\n\n\nVariable\nValue\n\n\n\n\ncontains_yes\n<? input.text.contains('Yes') ?>
Adding context variables to a node with slots	Personalizing the dialog with context	"Adding context variables to a node with slots\nFor more information about slots, see Gathering information with slots.\nTo add a context variable that is processed after a response condition for a slot is met:\n\nOpen the node with slots in the edit view.\nClick the Customize slot icon .\nClick the Options icon , and then select Enable condition.\nClick the Customize handler icon  next to the response with which you want to associate the context variable.\nClick the Options icon  in the Assistant responds section, and then click Open context editor.\nAdd the variable name and value pair to the Variable and Value fields.\n\nTo add a context variable that is set or updated after a slot condition is met, complete the following steps:\n\nOpen the node with slots in the edit view.\nClick the Customize slot icon .\nClick the Options icon , and then select Enable condition.\nAdd the variable name and value pair in JSON format.\n\n{\n""time_of_day"": ""morning""\n}\n\nYou can't use the context editor to define context variables that are set during this phase of dialog node evaluation. You must use the JSON editor instead. For more information about using the JSON editor, see Context variables in the JSON editor."
Context variables in the JSON editor	Personalizing the dialog with context	"Context variables in the JSON editor\nYou can also define a context variable in the JSON editor. Use the JSON editor if you are defining a complex context variable and want to be able to see the full SpEL expression as you add or change it.\nThe name and value pair must meet these requirements:\n\n\nThe name can contain any upper- and lowercase alphabet characters, numeric characters (0-9), and underscores.\nYou can include other characters, such as periods and hyphens, in the name. However, if you do, then you must specify the shorthand syntax $(variable-name) every time you reference the variable. See Expressions for accessing objects                for more details.\n\n\nThe value can be any supported JSON type, such as a simple string variable, a number, a JSON array, or a JSON object.\n\n\nThe following JSON sample defines values for the $dessert string, $toppings_array array, $age number, and $full_name object context variables:\n{\n  ""context"": {\n    ""dessert"": ""cake"",\n    ""toppings_array"": [\n      ""onions"",\n      ""olives""\n    ],\n    ""age"": 18,\n    ""full_name"": {\n      ""first"": ""Jane"",\n      ""last"": ""Doe""\n    }\n  },\n  ""output"":{}\n}\n\nTo define a context variable in JSON format, complete the following steps:\n\n\nClick to open the dialog node to which you want to add the context variable.\nAny existing context variable values that are defined for this node are displayed in a set of corresponding Variable and Value fields. If you do not want them to be displayed in the edit view of the node,\n                you must close the context editor. You can close the editor from the same menu that is used to open the JSON editor; the following steps describe how to access the menu."
Context variables in the JSON editor	Personalizing the dialog with context	"Click the Options icon  for the assistant response, and then click Open JSON editor.\nIf the Multiple conditioned responses setting is enabled for the node, then you must first click the Customize response  icon for the response with\n                which you want to associate the context variable.\n\n\nAdd a ""context"":{} block if one is not present.\n{\n  ""context"":{},\n  ""output"":{}\n}\n\n\n\nIn the context block, add a ""name"" and ""value"" pair for each context variable that you want to define.\n{\n  ""context"":{\n    ""name"": ""value""\n},\n  ""output"": {}\n}\n\nIn this example, a variable that is named new_variable is added to a context block that already contains a variable.\n{\n  ""context"":{\n    ""existing_variable"": ""value"",\n    ""new_variable"":""value""\n  }\n}\n\nTo reference the context variable, use the syntax $name where name is the name of the context variable that you defined. For example, $new_variable.\n\n\nLearn more:\n\nDeleting a context variable in JSON\nUpdating a context variable value in JSON\nSetting one context variable equal to another"
Deleting a context variable in JSON	Personalizing the dialog with context	"\nDeleting a context variable in JSON\nTo delete a context variable, set the variable to null.\n{\n  ""context"": {\n    ""order_form"": null\n  }\n}\n\nIf you want to remove all trace of the context variable, you can use the JSONObject.remove(string) method to delete it from the context object. However, you must use a variable to perform the removal. Define the new variable in the message\n              output so it isn't saved beyond the current call.\n{\n  ""output"": {\n    ""text"" : {},\n    ""deleted_variable"" : ""<? context.remove('order_form') ?>""\n  }\n}\n\nAlternatively you can delete the context variable in your application logic.\n"
Updating a context variable value in JSON	Personalizing the dialog with context	\nUpdating a context variable value in JSON\nIn general, if a node sets the value of a context variable that is already set, then the previous value is overwritten by the new value.\n
Updating a complex JSON object	Personalizing the dialog with context	"\nUpdating a complex JSON object\nPrevious values are overwritten for all JSON types except a JSON object. If the context variable is a complex type such as JSON object, a JSON merge procedure is used to update the variable. The merge operation adds any newly defined properties\n                and overwrites any existing properties of the object.\nIn this example, a name context variable is defined as a complex object.\n{\n  ""context"": {\n    ""complex_object"": {\n      ""user_firstname"" : ""Paul"",\n      ""user_lastname"" : ""Pan"",\n      ""has_card"" : false\n    }\n  }\n}\n\nA dialog node updates the context variable JSON object with the following values:\n{\n  ""complex_object"": {\n    ""user_firstname"": ""Peter"",\n    ""has_card"": true\n  }\n}\n\nThe result is this context:\n{\n  ""complex_object"": {\n    ""user_firstname"": ""Peter"",\n    ""user_lastname"": ""Pan"",\n    ""has_card"": true\n  }\n}\n\n"
Updating arrays	Personalizing the dialog with context	"Updating arrays\nIf your dialog context data contains an array of values, you can update the array by appending values, removing a value, or replacing all the values.\nChoose one of these actions to update the array. In each case, we see the array before the action, the action, and the array after the action is applied.\n\n\nAppend: To add values to the end of an array, use the append method.\nFor this dialog runtime context:\n{\n  ""context"": {\n    ""toppings_array"": [""onion"", ""olives""]\n  }\n}\n\nMake this update:\n{\n  ""context"": {\n    ""toppings_array"": ""<? $toppings_array.append('ketchup', 'tomatoes') ?>""\n  }\n}\n\nResult:\n{\n  ""context"": {\n    ""toppings_array"": [""onion"", ""olives"", ""ketchup"", ""tomatoes""]\n  }\n}\n\n\n\nRemove: To remove an element, use the remove method and specify its value or position in the array.\n\n\nRemove by value removes an element from an array by its value.\nFor this dialog runtime context:\n{\n  ""context"": {\n    ""toppings_array"": [""onion"", ""olives""]\n  }\n}\n\nMake this update:\n{\n  ""context"": {\n    ""toppings_array"": ""<? $toppings_array.removeValue('onion') ?>""\n  }\n}\n\nResult:\n{\n  ""context"": {\n    ""toppings_array"": [""olives""]\n  }\n}\n\n\n\nRemove by position: Removing an element from an array by its index position:\nFor this dialog runtime context:\n{\n  ""context"": {\n    ""toppings_array"": [""onion"", ""olives""]\n  }\n}\n\nMake this update:\n{\n  ""context"": {\n    ""toppings_array"": ""<? $toppings_array.remove(0) ?>""\n  }\n}\n\nResult:\n{\n  ""context"": {\n    ""toppings_array"": [""olives""]\n  }\n}"
Updating arrays	Personalizing the dialog with context	"Overwrite: To overwrite the values in an array, set the array to the new values:\nFor this dialog runtime context:\n{\n  ""context"": {\n    ""toppings_array"": [""onion"", ""olives""]\n  }\n}\n\nMake this update:\n{\n  ""context"": {\n    ""toppings_array"": [""ketchup"", ""tomatoes""]\n  }\n}\n\nResult:\n{\n  ""context"": {\n    ""toppings_array"": [""ketchup"", ""tomatoes""]\n  }\n}"
Setting one context variable equal to another	Personalizing the dialog with context	"Setting one context variable equal to another\nWhen you set one context variable equal to another context variable, you define a pointer from one to the other. Later, if the value of one of the variables changes, then the value of the other variable is changed also.\nFor example, if you specify a context variable as follows, then when the value of either $var1 or $var2 later changes, the value of the other changes too.\n\nSetting one context variable equal to another\n\n\nVariable\nValue\n\n\n\n\nvar2\nvar1\n\n\n\nDo not set one variable equal to another to capture a point in time value. With arrays, if you want to capture an array value that is stored in a context variable and use it later, create a new variable based on the current value of the variable\n              instead.\nFor example, to create a copy of the values of an array at a certain point, add an array that is populated with the values for the existing array. To do so, you can use the following syntax:\n{\n""context"": {\n   ""var2"": ""<? output.var2?:new JsonArray().append($var1) ?>""\n }\n }"
FAQs for watsonx Assistant	FAQs for watsonx Assistant	\nFAQs for watsonx Assistant\nFind answers to frequently-asked questions and quick fixes for common problems.\n
FAQs about watsonx Assistant	FAQs for watsonx Assistant	\nFAQs about watsonx Assistant\n
What is watsonx Assistant?	FAQs for watsonx Assistant	\nWhat is watsonx Assistant?\nIBM® watsonx™ Assistant is an improved way to build, publish, and improve virtual assistants. You use actions to build conversations. Actions are a simple way for anyone to create assistants. For more information, see the Getting Started guide or the documentation.\n
Why can't I see the assistants that I made with the classic experience in watsonx Assistant?	FAQs for watsonx Assistant	\nWhy can't I see the assistants that I made with the classic experience in watsonx Assistant?\nIBM® watsonx™ Assistant is a clean slate in the same IBM Cloud instance as your classic experience. Assistants that you created in one experience don't appear in the other. However, you can switch back and forth between experiences without\n              losing any work. For more information, see Switching between watsonx Assistant and the classic experience.\n
What happens when I switch between the classic experience and watsonx Assistant?	FAQs for watsonx Assistant	\nWhat happens when I switch between the classic experience and watsonx Assistant?\nThe assistants that you create in one experience don't transfer to the other. However, you can switch experiences, return to your work, and create or use assistants. You don't lose anything by switching. Changing experiences doesn't affect\n              other users in the same instance. For more information, see Switching between watsonx Assistant and the classic experience.\n
Is the classic experience still available?	FAQs for watsonx Assistant	\nIs the classic experience still available?\nIBM has no plans to discontinue the classic experience. However, we encourage you to explore the benefits and capabilities in watsonx Assistant. For more information, see the Getting Started guide. You can also continue to use dialog in watsonx Assistant. For more information, see Migrating to watsonx Assistant.\n
Where are the search skill and channel integrations in watsonx Assistant? 	FAQs for watsonx Assistant	\nWhere are the search skill and channel integrations in watsonx Assistant? \nIn the left navigation, click Integrations . On the Integrations page, you can add search, channel, and extension integrations to your assistant. For more information,\n              see Adding integrations.\n
Where is the Assistant ID found in the new product experience?	FAQs for watsonx Assistant	\nWhere is the Assistant ID found in the new product experience?\nThe assistant ID can be found in Assistant settings.\nIn Assistant settings, the assistant ID is in the Assistant IDs and API details section.\n
What do the draft and live tags mean?	FAQs for watsonx Assistant	\nWhat do the draft and live tags mean?\nA Draft tag indicates that the information is linked to your draft environment, which means that you can preview these updates but they are not visible to your users. A Live tag indicates that the information is linked\n              to your live environment, which means that the content is available to your users to interact with.\nFor more information, see Environments.\n
Why can't I log in?	FAQs for watsonx Assistant	\nWhy can't I log in?\nIf you can't log in to a service instance or see messages about tokens, such as unable to fetch access token or 400 bad request - header or cookie too large, it might mean that you need to clear your browser cache.\n            Open a private browser window, and then try again.\n\nIf the private browsing window fixes the issue, then consider always using a private window or clear the cache of your browser. You can typically find an option for clearing the cache or deleting cookies in the browser's privacy and security\n              settings.\nIf the private browsing window doesn't fix the issue, then try deleting the API key for the instance and creating a new one.\n\n
Why am I being asked to log in repeatedly?	FAQs for watsonx Assistant	\nWhy am I being asked to log in repeatedly?\nIf you keep getting messages, such as you are getting redirected to login, it might be due to one of the following things:\n\nThe Lite plan that you were using expired. Lite plans expire if they are not used within a 30-day span. To begin again, log in to IBM Cloud and create a new service instance of watsonx Assistant.\nAn instance is locked when you exceed the plan limits for the month. To log in successfully, wait until the start of the next month when the plan limit totals are reset.\n\n
Why don't I see the Analytics page?	FAQs for watsonx Assistant	\nWhy don't I see the Analytics page?\nTo view the Analytics page, you must have a service role of Manager and a platform role of at least Viewer. For more information about access roles and how to request an access role change, see Managing access to resources.\n
Why am I unable to view the API details, API key, or service credentials?	FAQs for watsonx Assistant	\nWhy am I unable to view the API details, API key, or service credentials?\nIf you cannot view the API details or service credentials, it is likely that you do not have Manager access to the service instance in which the resource was created. Only people with Manager access to the instance can use the service credentials.\n
Why can't I edit intents, entities, or dialog nodes?	FAQs for watsonx Assistant	\nWhy can't I edit intents, entities, or dialog nodes?\nTo edit a dialog, you must have Writer service access to the service instance and a platform role of at least Viewer. For more information about access roles and how to request an access role change, see Managing access to resources.\n
Can I export the user conversations from the Analytics page?	FAQs for watsonx Assistant	\nCan I export the user conversations from the Analytics page?\nYou cannot directly export conversations from the conversation page. However, you can use the /logs API to list events from the transcripts of conversations that occurred between your users and your assistant. For more information,\n            see the V2 API reference. Or, you can use a Python script to export logs. For more information, see export_logs_py.\n
Can I export and import dialog nodes?	FAQs for watsonx Assistant	\nCan I export and import dialog nodes?\nNo, you cannot export and import dialog nodes from the product user interface.\nIf you want to copy dialog nodes from one dialog into another dialog, follow these steps:\n\nDownload as JSON files both the dialog that you want to copy the dialog nodes from and the dialog that you want to copy the nodes to.\nIn a text editor, open the JSON file for the dialog that you want to copy the dialog nodes from.\nFind the dialog_nodes array, and copy it.\nIn a text editor, open the JSON file for the dialog skill that you want to copy the dialog nodes to, and then paste the dialog_nodes array into it.\nImport the JSON file that you edited in the previous step to create a new dialog skill with the dialog nodes you wanted.\n\n
Is it possible to recover a deleted dialog?	FAQs for watsonx Assistant	\nIs it possible to recover a deleted dialog?\nRegularly back up data to prevent problems that might arise from inadvertent deletions. If you do not have a backup, there is a short window of time during which a deleted dialog might be recoverable. Immediately following the deletion, open a case            with Support to determine if the data can be recovered. Include the following information in your case:\n\nSkill ID\nInstance ID or name\nRegion where the service instance is hosted from which the dialog was deleted\n\n
Can I change my plan to a Lite plan?	FAQs for watsonx Assistant	\nCan I change my plan to a Lite plan?\nNo, you cannot change from a Trial, Plus, or Standard plan to a Lite plan. And you cannot upgrade from a Trial to a Standard plan.\n
How many Lite plan instances of watsonx Assistant can I create?	FAQs for watsonx Assistant	\nHow many Lite plan instances of watsonx Assistant can I create?\nYou can have only one Lite plan instance of watsonx Assistant per resource group.\n
How long are log files kept?	FAQs for watsonx Assistant	\nHow long are log files kept?\nThe length of time for which messages are retained depends on your service plan. For more information, see Log limits.\n
How do I create a webhook?	FAQs for watsonx Assistant	\nHow do I create a webhook?\nTo define a webhook and add its details, go to the Live environment page and open the Environment settings page. From the Environment settings page, click Webhooks > Pre-message webhook.\n            You can add details about your webhook. For more information, see Making a call before processing a message.\n
